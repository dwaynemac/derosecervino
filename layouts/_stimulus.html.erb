<script type="module">
  import { Application, Controller } from "https://unpkg.com/@hotwired/stimulus/dist/stimulus.js"
  window.Stimulus = Application.start()
  Stimulus.register("navbar", class extends Controller {
    connect() {
      const navLinks = document.querySelectorAll('.nav-item')
      const menuToggle = document.getElementById('navbarSupportedContent')
      const bsCollapse = new bootstrap.Collapse(menuToggle, {
        toggle: false
      })
      navLinks.forEach((l) => {
        l.addEventListener('click', () => {
          if(bsCollapse._isShown()){
            bsCollapse.hide()
          }
        })
      })
    }
  })
  Stimulus.register("show-random", class extends Controller {
    static targets = ["item"]

    connect() {
      let items = this.itemTargets
      let item = items[Math.floor(Math.random()*items.length)]
      item.classList.remove('d-none')
    }
  })

  // Para mostrar Ãºnicamente el valor
  Stimulus.register("learn-amount", class extends Controller {
    static values = { url: String }

    connect() {
      this.renderValue()
    }

    renderValue(){
      fetch(this.urlValue)
        .then(response => response.json())
        .then(data => {
          this.element.innerText = (data.amount_cents / 100).toLocaleString("es-AR")
        })
    }
  })

  // Para mostrar el nombre, el valor y linkear al pago
  Stimulus.register("learn-subscription", class extends Controller {
    static values = { url: String }
    static targets = ["name", "amount", "payButton"]

    connect() {
      this.renderValue()
    }

    renderValue(){
      fetch(this.urlValue)
        .then(response => response.json())
        .then(data => {
          this.nameTarget.innerText = data.name
          this.amountTarget.innerText = (data.amount_cents / 100).toLocaleString("es-AR")
          this.amountTarget.dispatchEvent(new CustomEvent('learn-subscription:loaded'))
          if (this.hasPayButtonTarget){
            this.payButtonTarget.href = this.urlValue.replace(".json", "")
          }
        })
    }
  })

  Stimulus.register("authorizer", class extends Controller {

    static values = {name: String, val: String}
    static targets = ["authorized", "unauthorized"]

    connect(){
      if (this.isAuthorized()) {
        this.authorizedTarget.classList.remove('d-none')
      } else {
        this.unauthorizedTarget.classList.remove('d-none')
      }
    }

    isAuthorized(){
      let params = new URLSearchParams(window.location.search);
      return params.get(this.nameValue) === this.valValue
    }
  })

  Stimulus.register("small-thousands", class extends Controller {
    connect() {
      this.element.addEventListener('learn-subscription:loaded', () => {
        // replace .ddd with <span class="thousands">.ddd</span>
        this.element.innerHTML = this.element.innerText.replace(/\.(\d{3})$/g, '<span class="thousands">.$1</span>')
      })
    }
  })

</script>
